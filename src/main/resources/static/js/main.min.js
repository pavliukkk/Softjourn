function burgerMenu()
{
	const e = document.querySelector(".burger"),
		t = document.querySelector(".nav__menu"),
		n = document.querySelector(".nav__contact"),
		i = document.querySelector("body");
	e.addEventListener("click", (() =>
	{
		t.classList.contains("active") ? (t.classList.remove("active"), e.classList.remove("active-burger"), i.classList.remove("locked"), n.classList.remove("active")) : (t.classList.add("active"), n.classList.add("active"), e.classList.add("active-burger"), i.classList.add("locked"))
	}))
}

function fixedNav()
{
	const e = document.querySelector("nav");
	window.scrollY > 1 ? e.classList.add("fixed__nav") : e.classList.remove("fixed__nav")
}
if (document.addEventListener("DOMContentLoaded", (() =>
	{
		function e()
		{
			dataLayer.push(arguments)
		}
		window.dataLayer = window.dataLayer || [], e("js", new Date), e("config", "G-SV9ZE40ZLC")
	})), burgerMenu(), window.addEventListener("scroll", fixedNav), document.querySelector(".home"))
{
	new Swiper(".review__swiper > .swiper-container",
	{
		direction: "horizontal",
		loop: !1,
		initialSlide: 0,
		speed: 1500,
		slidesPerView: 1,
		spaceBetween: 50,
		autoplay:
		{
			delay: 5e3,
			disableOnInteraction: !0
		},
		keyboard:
		{
			enabled: !0,
			onlyInViewport: !1
		},
		pagination:
		{
			el: ".swiper-pagination",
			type: "fraction"
		},
		navigation:
		{
			nextEl: ".swiper-next",
			prevEl: ".swiper-prev"
		}
	});
	const e = document.querySelectorAll(".start__scroll");
	for (const t of e) t.addEventListener("click", scrollToBlock);

	function scrollToBlock()
	{
		var e = document.getElementById("menu"),
			t = window.pageYOffset,
			n = e.offsetTop - t,
			i = null;
		requestAnimationFrame((function e(o)
		{
			null === i && (i = o);
			var r, a, s, c = o - i,
				l = (r = c, a = t, s = n, (r /= 2e3 / 2) < 1 ? s / 2 * r * r * r + a : s / 2 * ((r -= 2) * r * r + 2) + a);
			window.scrollTo(0, l), c < 2e3 && requestAnimationFrame(e)
		}))
	}
}
if (document.querySelector(".blog")) var swiper = new Swiper(".mySwiper",
	{
		spaceBetween: 60,
		slidesPerView: 2,
		loop: !0,
		freeMode: !0,
		direction: "vertical",
		breakpoints:
		{
			1201:
			{
				spaceBetween: 30,
				slidesPerView: 2,
				direction: "vertical"
			},
			451:
			{
				slidesPerView: 2,
				direction: "horizontal"
			},
			0:
			{
				direction: "horizontal",
				slidesPerView: 1
			}
		}
	}),
	swiper2 = new Swiper(".mySwiper2",
	{
		spaceBetween: 10,
		loop: !0,
		autoplay:
		{
			delay: 5e3,
			disableOnInteraction: !1
		},
		thumbs:
		{
			swiper: swiper
		}
	});

	if (document.querySelector(".body__soon")) {
		function getTimeRemaining(targetDate) {
			const total = Date.parse(targetDate) - Date.now();
			const days = Math.floor(total / (1000 * 60 * 60 * 24));
			const hours = Math.floor((total % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
			const minutes = Math.floor((total % (1000 * 60 * 60)) / (1000 * 60));
			const seconds = Math.floor((total % (1000 * 60)) / 1000);
			const months = Math.floor(days / 30); // Кількість місяців, приблизно
			return {
				total: total,
				days: days > 0 ? days : 0,
				hours: hours > 0 ? hours : 0,
				minutes: minutes > 0 ? minutes : 0,
				seconds: seconds > 0 ? seconds : 0,
				months: months > 0 ? months : 0
			};
		}
	
		function initializeClock(clockId, endDate) {
			const clock = document.getElementById(clockId);
			const daysSpan = clock.querySelector("#timer-days");
			const hoursSpan = clock.querySelector("#timer-hours");
			const minutesSpan = clock.querySelector("#timer-mins");
			const secondsSpan = clock.querySelector("#timer-secs");
			const monthsSpan = clock.querySelector("#timer-months");
	
			function updateClock() {
				const timeRemaining = getTimeRemaining(endDate);
	
				daysSpan.innerHTML = ("0" + timeRemaining.days).slice(-2);
				hoursSpan.innerHTML = ("0" + timeRemaining.hours).slice(-2);
				minutesSpan.innerHTML = ("0" + timeRemaining.minutes).slice(-2);
				secondsSpan.innerHTML = ("0" + timeRemaining.seconds).slice(-2);
				monthsSpan.innerHTML = ("0" + timeRemaining.months).slice(-2);
	
				if (timeRemaining.total <= 0) {
					clearInterval(timeInterval);
				}
			}
	
			updateClock();
			const timeInterval = setInterval(updateClock, 1000);
		}
	
		const targetDate = new Date("2024-01-01T00:00:00");
		initializeClock("timer", targetDate);
	}